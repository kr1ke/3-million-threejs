{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useEffect","scene","Scene","aspect","window","innerWidth","innerHeight","frustumSize","camera","OrthographicCamera","provider","Geo","map","PLANAR","lod","updateMatrixWorld","add","axesHelper","AxesHelper","renderer","WebGLRenderer","setSize","document","body","appendChild","domElement","controls","MapControls","update","coords","datumsToSpherical","target","set","x","y","position","geometry","BoxGeometry","material","MeshBasicMaterial","color","Mesh","i","cube","Math","random","animate","requestAnimationFrame","render","rootElement","getElementById","ReactDOMClient","_jsx","StrictMode","children"],"mappings":"uNAuBe,SAASA,IAiFpB,OAhFAC,qBAAU,KACN,MAAMC,EAAQ,IAAIC,IAIZC,EAFQC,OAAOC,WACND,OAAOE,YAEhBC,EAAc,IACdC,EAAS,IAAIC,IACdF,EAAcJ,GAAW,EACzBI,EAAcJ,EAAU,EACzBI,KACAA,KACC,IACD,KAYEG,EAAW,IAAIC,IACfC,EAAM,IAAID,IAAYA,IAAYE,OAAQH,GAChDE,EAAIE,IAAM,IAAIH,IACdC,EAAIG,mBAAkB,GACtBd,EAAMe,IAAIJ,GAEV,MAAMK,EAAa,IAAIC,IAAW,GAClCjB,EAAMe,IAAIC,GAEV,MAAME,EAAW,IAAIC,IACrBD,EAASE,QAAQjB,OAAOC,WAAYD,OAAOE,aAC3CgB,SAASC,KAAKC,YAAYL,EAASM,YAEnC,MAAMC,EAAW,IAAIC,IAAYnB,EAAQW,EAASM,YAGlDC,EAASE,SAET,MAAMC,EAASlB,IAAemB,kBAAkB,UAAW,WAC3DJ,EAASK,OAAOC,IAAIH,EAAOI,EAAG,GAAIJ,EAAOK,GACzC1B,EAAO2B,SAASH,IAAIH,EAAOI,EAAG,GAAIJ,EAAOK,GAEzC,MAAME,EAAW,IAAIC,IAAY,EAAG,EAAG,GACjCC,EAAW,CACb,IAAIC,IAAkB,CAAEC,MAAO,QAC/B,IAAID,IAAkB,CAAEC,MAAO,QAC/B,IAAID,IAAkB,CAAEC,MAAO,MAC/B,IAAID,IAAkB,CAAEC,MAAO,WAC/B,IAAID,IAAkB,CAAEC,MAAO,WAC/B,IAAID,IAAkB,CAAEC,MAAO,SAEtB,IAAIC,IAAKL,EAAUE,GAC3BH,SAASH,IAAIH,EAAOI,EAAG,GAAIJ,EAAOK,GAEvC,IAAK,IAAIQ,EAAI,EAAGA,EAAI,IAAOA,IAAK,CAC5B,MAAMC,EAAO,IAAIF,IAAKL,EAAUE,GAGhCK,EAAKR,SAASH,IACVH,EAAOI,EAAoB,IAAhBW,KAAKC,SAAkB,GAClB,GAAhBD,KAAKC,UACJhB,EAAOK,EAAoB,IAAhBU,KAAKC,SAAkB,IAGvC5C,EAAMe,IAAI2B,EACd,EAEA,SAASG,IACLC,sBAAsBD,GACtB3B,EAAS6B,OAAO/C,EAAOO,EAC3B,CAEAsC,EAAS,GACV,IAEI,IACX,C,WCpGA,MAAMG,EAAc3B,SAAS4B,eAAe,QAC/BC,aAA0BF,GAElCD,OACHI,cAACC,aAAU,CAAAC,SACTF,cAACrD,EAAG,M","file":"static/js/main.8ae8052e.chunk.js","sourcesContent":["import {useEffect} from \"react\";\nimport {\n    Scene,\n    WebGLRenderer,\n    OrthographicCamera,\n    BoxGeometry,\n    Mesh,\n    MeshBasicMaterial,\n    MeshBoxMaterial,\n    BoxBufferGeometry,\n    TextureLoader,\n    InstancedMesh,\n    Matrix4\n\n} from \"three\";\nimport {AxesHelper} from \"three/src/helpers/AxesHelper\";\nimport {\n    OrbitControls,\n    MapControls\n} from \"three/examples/jsm/controls/OrbitControls\";\nimport * as Geo from \"geo-three\";\nimport \"./styles.css\";\n\nexport default function App() {\n    useEffect(() => {\n        const scene = new Scene();\n\n        const width = window.innerWidth;\n        const height = window.innerHeight;\n        const aspect = width / height;\n        const frustumSize = 1000;\n        const camera = new OrthographicCamera(\n            (frustumSize * aspect) / -2,\n            (frustumSize * aspect) / 2,\n            frustumSize / 2,\n            frustumSize / -2,\n            -10000,\n            10000\n        );\n\n        // const camera = new PerspectiveCamera(80, 1, 1e2, 1e12);\n        // const camera = new PerspectiveCamera(\n        //   75,\n        //   window.innerWidth / window.innerHeight,\n        //   0.1,\n        //   1000\n        // );\n\n        // const provider = new Geo.DebugProvider();\n        const provider = new Geo.OpenStreetMapsProvider();\n        const map = new Geo.MapView(Geo.MapView.PLANAR, provider);\n        map.lod = new Geo.LODFrustum();\n        map.updateMatrixWorld(true);\n        scene.add(map);\n\n        const axesHelper = new AxesHelper(5);\n        scene.add(axesHelper);\n\n        const renderer = new WebGLRenderer();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        document.body.appendChild(renderer.domElement);\n\n        const controls = new MapControls(camera, renderer.domElement);\n        // controls.minDistance = 1e1;\n        // controls.zoomSpeed = 2.0;\n        controls.update();\n\n        const coords = Geo.UnitsUtils.datumsToSpherical(52.601735, 39.589755);\n        controls.target.set(coords.x, 0, -coords.y);\n        camera.position.set(coords.x, 1, -coords.y);\n\n        const geometry = new BoxGeometry(1, 1, 1);\n        const material = [\n            new MeshBasicMaterial({ color: 0x00ff00 }), // Right side\n            new MeshBasicMaterial({ color: 0x00ff00 }),  // Left side\n            new MeshBasicMaterial({ color: 0x0000ff }),  // Top side\n            new MeshBasicMaterial({ color: 0xffff00 }),  // Bottom side\n            new MeshBasicMaterial({ color: 0xff00ff }),  // Front side\n            new MeshBasicMaterial({ color: 0x00ffff })   // Back side\n        ]\n        const cube = new Mesh(geometry, material);\n        cube.position.set(coords.x, 1, -coords.y);\n\n        for (let i = 0; i < 30000; i++) {\n            const cube = new Mesh(geometry, material);\n\n            // Random position within a certain range for each cube\n            cube.position.set(\n                coords.x + Math.random() * 1000 - 50,\n                Math.random() * 50, // Height\n                -coords.y + Math.random() * 1000 - 50\n            );\n\n            scene.add(cube);\n        }\n\n        function animate() {\n            requestAnimationFrame(animate);\n            renderer.render(scene, camera);\n        }\n\n        animate();\n    }, []);\n\n    return null;\n}\n","import { StrictMode } from \"react\";\nimport * as ReactDOMClient from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = ReactDOMClient.createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}